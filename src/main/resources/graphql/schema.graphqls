type User {
    id: ID!
    username: String
    email: String
    password: String
    role: String
}

type LoginResponse {
    id: ID!
    token: String!
    username: String!
    email: String!
    role: String!
}

type Customer {
    id: ID!
    name: String
    phone: String
    email: String
}

type Supplier {
    id: ID!
    name: String
    email: String
    phone: String
    address: String
}

type Query {
    users: [User]
    user(id: ID!): User
    customers: [Customer]
    customer(id: ID!): Customer
    suppliers: [Supplier]
    supplier(id: ID!): Supplier
}

type Mutation {
    createUser(username: String!, email: String!, password: String!, role: String!): User
    updateUser(id: ID!, username: String, email: String, password: String, role: String): User
    deleteUser(id: ID!): Boolean
    loginUser(username: String!, password: String!): LoginResponse

    createCustomer(name: String!, phone: String!, email: String!): Customer
    updateCustomer(id: ID!, name: String, phone: String, email: String): Customer
    deleteCustomer(id: ID!): Boolean

    createSupplier(name: String!, email: String!, phone: String!, address: String!, company: String!): Supplier
    updateSupplier(id: ID!, name: String, email: String, phone: String, address: String, company: String): Supplier
    deleteSupplier(id: ID!): Boolean
}